// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: responses.sql

package sqlcdb

import (
	"context"
)

const getAnsweredQuestions = `-- name: GetAnsweredQuestions :many
SELECT
    id, user_id, question_id, survey_id, answer, created_at, updated_at
FROM
    responses
WHERE
    user_id = ?
    AND survey_id = ?
`

type GetAnsweredQuestionsParams struct {
	UserID   string
	SurveyID string
}

func (q *Queries) GetAnsweredQuestions(ctx context.Context, arg GetAnsweredQuestionsParams) ([]Response, error) {
	rows, err := q.db.QueryContext(ctx, getAnsweredQuestions, arg.UserID, arg.SurveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Response{}
	for rows.Next() {
		var i Response
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.QuestionID,
			&i.SurveyID,
			&i.Answer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertResponse = `-- name: UpsertResponse :one
INSERT INTO responses (
    id,
    user_id,
    question_id,
    survey_id,
    answer,
    created_at
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    DATE('now')
) ON CONFLICT (user_id, question_id) DO UPDATE SET
    answer = EXCLUDED.answer,
    updated_at = DATE('now')
RETURNING id, user_id, question_id, survey_id, answer, created_at, updated_at
`

type UpsertResponseParams struct {
	ID         string
	UserID     string
	QuestionID string
	SurveyID   string
	Answer     string
}

func (q *Queries) UpsertResponse(ctx context.Context, arg UpsertResponseParams) (Response, error) {
	row := q.db.QueryRowContext(ctx, upsertResponse,
		arg.ID,
		arg.UserID,
		arg.QuestionID,
		arg.SurveyID,
		arg.Answer,
	)
	var i Response
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.QuestionID,
		&i.SurveyID,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
