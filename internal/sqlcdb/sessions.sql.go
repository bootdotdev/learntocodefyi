// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sessions.sql

package sqlcdb

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    created_at,
    user_id
) VALUES (
    ?,
    DATE('now'),
    ?
) RETURNING id, created_at, user_id
`

type CreateSessionParams struct {
	ID     string
	UserID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UserID)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, created_at, user_id FROM sessions
WHERE id = ?
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UserID)
	return i, err
}

const getSessionCreatedAfter = `-- name: GetSessionCreatedAfter :one
SELECT id, created_at, user_id FROM sessions
WHERE user_id = ?
    AND created_at > ?
`

type GetSessionCreatedAfterParams struct {
	UserID    string
	CreatedAt time.Time
}

func (q *Queries) GetSessionCreatedAfter(ctx context.Context, arg GetSessionCreatedAfterParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionCreatedAfter, arg.UserID, arg.CreatedAt)
	var i Session
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UserID)
	return i, err
}
